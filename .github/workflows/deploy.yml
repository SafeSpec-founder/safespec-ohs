name: Deploy to Firebase

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: "18"
  FIREBASE_PROJECT_ID: "safespec-ohs"

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install frontend dependencies
        run: npm ci

      - name: Install functions dependencies
        run: |
          cd functions
          npm ci

      - name: Run frontend linting
        run: npm run lint

      - name: Run frontend type checking
        run: npm run type-check

      - name: Run frontend tests
        run: npm run test:unit

      - name: Run functions tests
        run: |
          cd functions
          npm run test

      - name: Build frontend
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install functions dependencies
        run: |
          cd functions
          npm ci

      - name: Build frontend
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VITE_API_URL: https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Deploy to Firebase Staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}"
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: staging
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Functions to Staging
        run: |
          npm install -g firebase-tools
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}' > service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install functions dependencies
        run: |
          cd functions
          npm ci

      - name: Build frontend
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VITE_API_URL: https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Deploy to Firebase Production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}"
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live
        env:
          FIREBASE_CLI_EXPERIMENTS: webframeworks

      - name: Deploy Functions to Production
        run: |
          npm install -g firebase-tools
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}' > service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
          firebase deploy --only functions,firestore:rules,firestore:indexes,storage --project ${{ env.FIREBASE_PROJECT_ID }}

      - name: Run post-deployment tests
        run: |
          npm run test:e2e
        env:
          E2E_BASE_URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate
          cd functions && npm audit --audit-level moderate

  performance-test:
    runs-on: ubuntu-latest
    name: Performance Test
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "SafeSpec OHS deployment successful! üöÄ"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "SafeSpec OHS deployment failed! ‚ùå"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
