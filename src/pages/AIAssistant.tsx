import React, { useState, useEffect } from "react";
import { useAuth } from "../contexts/AuthContext";
import { db } from "../config/firebase";
import {
  collection,
  query as firestoreQuery,
  orderBy,
  limit,
  addDoc,
  serverTimestamp,
  onSnapshot,
  where,
} from "firebase/firestore";

interface Response {
  id: string;
  query: string;
  response: string;
  timestamp: string;
  rawTimestamp?: any;
  userId?: string;
}

const AIAssistant: React.FC = () => {
  const { user } = useAuth();
  const [query, setQuery] = useState<string>("");
  const [responses, setResponses] = useState<Response[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  // Fetch AI conversation history from Firestore
  useEffect(() => {
    if (!user) return;

    setIsLoading(true);

    try {
      // Create a query to get user's AI conversations
      const conversationsRef = collection(db, "aiConversations");
      const conversationsQuery = firestoreQuery(
        conversationsRef,
        where("userId", "==", user.uid),
        orderBy("timestamp", "desc"),
        limit(10),
      );

      // Set up real-time listener
      const unsubscribe = onSnapshot(
        conversationsQuery,
        (snapshot: any) => {
          const conversationsData: Response[] = snapshot.docs.map(
            (doc: any) => {
              const data = doc.data();
              return {
                id: doc.id,
                query: data.query,
                response: data.response,
                timestamp: formatTimestamp(data.timestamp),
                rawTimestamp: data.timestamp,
                userId: data.userId,
              };
            },
          );

          setResponses(conversationsData);
          setIsLoading(false);
        },
        (error: Error) => {
          console.error("Error fetching AI conversations:", error);
          setIsLoading(false);
        },
      );

      // Cleanup listener on unmount
      return () => unsubscribe();
    } catch (error: any) {
      console.error("Error setting up AI conversations listener:", error);
      setIsLoading(false);
    }
  }, [user]);

  // Format timestamp for display
  const formatTimestamp = (timestamp: any): string => {
    if (!timestamp) return "";

    try {
      const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
      return date.toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch (error) {
      console.error("Error formatting timestamp:", error);
      return "";
    }
  };

  // Handle submit query to AI assistant
  const handleSubmit = async (e: React.FormEvent): Promise<void> => {
    e.preventDefault();

    if (!user || query.trim() === "") return;

    try {
      // In a real app, this would send the query to an AI service
      // For now, we'll create a simulated response but store it in Firestore

      // Create a new document in Firestore
      const aiConversationsRef = collection(db, "aiConversations");
      const timestamp = serverTimestamp();

      // Simulated AI response (in production, this would come from an actual AI service)
      const simulatedResponse =
        "This is a response from the AI assistant based on your safety documentation and procedures. In a production environment, this would be generated by a real AI service.";

      // Add the conversation to Firestore
      await addDoc(aiConversationsRef, {
        query: query,
        response: simulatedResponse,
        userId: user.uid,
        userName: user.displayName,
        timestamp: timestamp,
        userEmail: user.email,
      });

      // Clear the input field
      setQuery("");

      // Note: We don't need to manually update the responses state
      // as the onSnapshot listener will catch the new document
    } catch (error) {
      console.error("Error submitting AI query:", error);
    }
  };

  return (
    <div>
      <div className="dashboard-header">
        <h1 className="dashboard-title">AI Safety Assistant</h1>
      </div>

      <div className="dashboard-card">
        <div className="card-header">
          <div className="card-title">Ask a Question</div>
        </div>
        <div className="card-content">
          <form onSubmit={handleSubmit} className="ai-form">
            <div className="ai-input-container">
              <input
                type="text"
                className="ai-input"
                placeholder="Ask about safety procedures, regulations, or how to use this system..."
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                disabled={!user}
              />
              <button
                type="submit"
                className="ai-submit-button"
                disabled={!user}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <line x1="22" y1="2" x2="11" y2="13"></line>
                  <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
              </button>
            </div>
          </form>
        </div>
      </div>

      <div className="dashboard-card">
        <div className="card-header">
          <div className="card-title">Recent Conversations</div>
        </div>
        <div className="card-content">
          {isLoading ? (
            <div className="loader-container">
              <div className="loader"></div>
              <div className="loader-text">Loading conversations...</div>
            </div>
          ) : responses.length === 0 ? (
            <div className="empty-state">
              <h3>No conversations yet</h3>
              <p>
                Ask a question to start a conversation with the AI assistant.
              </p>
            </div>
          ) : (
            <div className="ai-conversations">
              {responses.map((item) => (
                <div key={item.id} className="ai-conversation-item">
                  <div className="ai-query">
                    <div className="ai-user-icon">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                      </svg>
                    </div>
                    <div className="ai-content">
                      <div className="ai-message">{item.query}</div>
                      <div className="ai-timestamp">{item.timestamp}</div>
                    </div>
                  </div>
                  <div className="ai-response">
                    <div className="ai-assistant-icon">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      >
                        <circle cx="12" cy="12" r="10"></circle>
                        <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                        <line x1="12" y1="17" x2="12.01" y2="17"></line>
                      </svg>
                    </div>
                    <div className="ai-content">
                      <div className="ai-message">{item.response}</div>
                      <div className="ai-actions">
                        <button
                          className="ai-action-button"
                          onClick={() => {
                            // Save conversation to user's saved items in Firestore
                            if (user) {
                              addDoc(collection(db, "savedConversations"), {
                                conversationId: item.id,
                                query: item.query,
                                response: item.response,
                                userId: user.uid,
                                savedAt: serverTimestamp(),
                              })
                                .then(() => {
                                  // Show success message
                                  alert("Conversation saved to your account");
                                })
                                .catch((error) => {
                                  console.error(
                                    "Error saving conversation:",
                                    error,
                                  );
                                });
                            }
                          }}
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          >
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" y1="15" x2="12" y2="3"></line>
                          </svg>
                          Save
                        </button>
                        <button
                          className="ai-action-button"
                          onClick={() => {
                            // Copy to clipboard
                            navigator.clipboard
                              .writeText(item.response)
                              .then(() => {
                                // Show success message
                                alert("Response copied to clipboard");
                              })
                              .catch((error) => {
                                console.error("Error copying text:", error);
                              });
                          }}
                        >
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            strokeWidth="2"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                          >
                            <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                            <rect
                              x="8"
                              y="2"
                              width="8"
                              height="4"
                              rx="1"
                              ry="1"
                            ></rect>
                          </svg>
                          Copy
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AIAssistant;
