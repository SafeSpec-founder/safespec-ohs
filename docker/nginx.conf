# Optimized Nginx Configuration for SafeSpec OHS PWA
# Production-ready configuration with security, performance, and PWA optimizations

user safespec;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize worker connections
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    
    # Content Security Policy for PWA
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://apis.google.com https://www.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https: wss: https://api.safespec.com https://firestore.googleapis.com https://firebase.googleapis.com; media-src 'self' blob:; object-src 'none'; frame-src 'none'; worker-src 'self' blob:; manifest-src 'self';" always;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Hide nginx version
    server_tokens off;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # Main server block
    server {
        listen 8080;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        
        # Security: Disable server signature
        server_tokens off;
        
        # Enable HTTP/2 Server Push for critical resources
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            
            # HTTP/2 Server Push for critical resources
            add_header Link "</manifest.json>; rel=preload; as=manifest";
            add_header Link "</src/main.tsx>; rel=modulepreload";
            
            try_files $uri $uri/ =404;
        }
        
        # PWA Manifest
        location = /manifest.json {
            add_header Content-Type "application/manifest+json";
            add_header Cache-Control "public, max-age=86400"; # 1 day
            try_files $uri =404;
        }
        
        # Service Worker
        location = /sw.js {
            add_header Content-Type "application/javascript";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            try_files $uri =404;
        }
        
        # Workbox files
        location ~* ^/workbox-.*\.js$ {
            add_header Content-Type "application/javascript";
            add_header Cache-Control "public, max-age=31536000"; # 1 year
            try_files $uri =404;
        }
        
        # Static assets with long cache
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # CORS for fonts
            if ($request_filename ~* \.(woff|woff2|ttf|eot)$) {
                add_header Access-Control-Allow-Origin "*";
            }
            
            try_files $uri =404;
        }
        
        # API proxy (if needed)
        location /api/ {
            # Rate limiting for API
            limit_req zone=api burst=20 nodelay;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Proxy to backend (configure as needed)
            # proxy_pass http://backend:3001;
            
            # For now, return 404 for API calls
            return 404;
        }
        
        # Health check endpoint
        location = /health {
            access_log off;
            add_header Content-Type "text/html";
            return 200;
        }
        
        # Nginx status (for monitoring)
        location = /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Security: Block access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Security: Block access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # PWA: Handle client-side routing
        location / {
            try_files $uri $uri/ @fallback;
        }
        
        # Fallback for client-side routing
        location @fallback {
            rewrite ^.*$ /index.html last;
        }
        
        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Additional server block for HTTPS redirect (when using reverse proxy)
    server {
        listen 8080;
        server_name localhost;
        
        # Redirect HTTP to HTTPS in production
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$host$request_uri;
        }
        
        # Include main server configuration
        include /etc/nginx/conf.d/default.conf;
    }
}

