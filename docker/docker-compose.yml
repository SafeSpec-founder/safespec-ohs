# Production-Ready Docker Compose for SafeSpec OHS PWA
# Comprehensive multi-environment setup with monitoring, security, and scalability

version: "3.8"

# ================================
# SERVICES CONFIGURATION
# ================================
services:
  # ================================
  # SafeSpec OHS Frontend Application
  # ================================
  safespec-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    image: safespec/ohs-app:${TAG:-latest}
    container_name: safespec-ohs-app
    restart: unless-stopped

    # Port configuration
    ports:
      - "${APP_PORT:-8080}:8080"

    # Environment variables
    environment:
      - NODE_ENV=production
      - TZ=${TIMEZONE:-UTC}

      # Firebase Configuration
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
      - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
      - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
      - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
      - VITE_FIREBASE_MEASUREMENT_ID=${VITE_FIREBASE_MEASUREMENT_ID}

      # API Configuration
      - VITE_API_URL=${VITE_API_URL:-https://api.safespec.com/v1}
      - VITE_API_TIMEOUT=${VITE_API_TIMEOUT:-30000}

      # Feature Flags
      - VITE_ENABLE_ANALYTICS=${VITE_ENABLE_ANALYTICS:-true}
      - VITE_ENABLE_OFFLINE=${VITE_ENABLE_OFFLINE:-true}
      - VITE_ENABLE_PWA=${VITE_ENABLE_PWA:-true}

      # Security
      - VITE_CSP_NONCE=${VITE_CSP_NONCE}
      - VITE_SENTRY_DSN=${VITE_SENTRY_DSN}

    # Volume mounts
    volumes:
      - app-logs:/var/log/nginx
      - app-cache:/var/cache/nginx
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m

    # Network
    networks:
      - safespec-frontend
      - safespec-backend

    # Dependencies
    depends_on:
      redis:
        condition: service_healthy

    # Labels for monitoring and management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.safespec.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.safespec.tls=true"
      - "traefik.http.routers.safespec.tls.certresolver=letsencrypt"
      - "traefik.http.services.safespec.loadbalancer.server.port=8080"
      - "com.safespec.service=frontend"
      - "com.safespec.version=${VERSION:-1.0.0}"

  # ================================
  # Reverse Proxy & Load Balancer
  # ================================
  traefik:
    image: traefik:v3.0
    container_name: safespec-traefik
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard

    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${ACME_EMAIL}
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_STORAGE=/acme.json
      - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_HTTPCHALLENGE_ENTRYPOINT=web

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/acme.json
      - ./traefik:/etc/traefik:ro

    networks:
      - safespec-frontend

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"

    profiles:
      - production

  # ================================
  # Redis Cache & Session Store
  # ================================
  redis:
    image: redis:7-alpine
    container_name: safespec-redis
    restart: unless-stopped

    ports:
      - "${REDIS_PORT:-6379}:6379"

    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro

    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 64M

    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    networks:
      - safespec-backend

  # ================================
  # PostgreSQL Database (Optional)
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: safespec-postgres
    restart: unless-stopped

    ports:
      - "${POSTGRES_PORT:-5432}:5432"

    environment:
      - POSTGRES_DB=${POSTGRES_DB:-safespec}
      - POSTGRES_USER=${POSTGRES_USER:-safespec}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-safespec} -d ${POSTGRES_DB:-safespec}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

    networks:
      - safespec-backend

    profiles:
      - database

  # ================================
  # Monitoring: Prometheus
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: safespec-prometheus
    restart: unless-stopped

    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"

    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--storage.tsdb.retention.size=10GB"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"

    networks:
      - safespec-monitoring

    profiles:
      - monitoring

  # ================================
  # Monitoring: Grafana
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: safespec-grafana
    restart: unless-stopped

    ports:
      - "${GRAFANA_PORT:-3001}:3000"

    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro

    networks:
      - safespec-monitoring

    depends_on:
      - prometheus

    profiles:
      - monitoring

  # ================================
  # Log Management: Loki
  # ================================
  loki:
    image: grafana/loki:latest
    container_name: safespec-loki
    restart: unless-stopped

    ports:
      - "${LOKI_PORT:-3100}:3100"

    volumes:
      - loki-data:/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro

    command: -config.file=/etc/loki/local-config.yaml

    networks:
      - safespec-monitoring

    profiles:
      - monitoring

  # ================================
  # Log Collection: Promtail
  # ================================
  promtail:
    image: grafana/promtail:latest
    container_name: safespec-promtail
    restart: unless-stopped

    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro

    command: -config.file=/etc/promtail/config.yml

    networks:
      - safespec-monitoring

    depends_on:
      - loki

    profiles:
      - monitoring

  # ================================
  # Security: Fail2Ban
  # ================================
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: safespec-fail2ban
    restart: unless-stopped

    environment:
      - TZ=${TIMEZONE:-UTC}
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=30d

    volumes:
      - fail2ban-data:/data
      - app-logs:/var/log/nginx:ro
      - ./fail2ban:/etc/fail2ban:ro

    cap_add:
      - NET_ADMIN
      - NET_RAW

    network_mode: host

    profiles:
      - security

  # ================================
  # Backup Service
  # ================================
  backup:
    image: alpine:latest
    container_name: safespec-backup
    restart: "no"

    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION=${BACKUP_RETENTION:-30}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - BACKUP_BUCKET=${BACKUP_BUCKET}

    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - app-logs:/backup/logs:ro
      - ./scripts/backup.sh:/backup.sh:ro

    command: >
      sh -c "
        apk add --no-cache aws-cli postgresql-client redis &&
        echo '${BACKUP_SCHEDULE} /backup.sh' | crontab - &&
        crond -f
      "

    networks:
      - safespec-backend

    profiles:
      - backup

# ================================
# VOLUMES CONFIGURATION
# ================================
volumes:
  # Application data
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

  app-cache:
    driver: local

  # Database data
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  # Monitoring data
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus

  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana

  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/loki

  # Security data
  fail2ban-data:
    driver: local

  # SSL certificates
  traefik-acme:
    driver: local

# ================================
# NETWORKS CONFIGURATION
# ================================
networks:
  # Frontend network (public-facing)
  safespec-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: safespec-frontend

  # Backend network (internal services)
  safespec-backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: safespec-backend
    internal: true

  # Monitoring network
  safespec-monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: safespec-monitoring
# ================================
# CONFIGURATION PROFILES
# ================================
# Usage examples:
# docker-compose up -d                          # Basic setup (app + redis)
# docker-compose --profile production up -d     # Production setup with Traefik
# docker-compose --profile monitoring up -d     # Add monitoring stack
# docker-compose --profile database up -d       # Add PostgreSQL database
# docker-compose --profile security up -d       # Add security services
# docker-compose --profile backup up -d         # Add backup service

